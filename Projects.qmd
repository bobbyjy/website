---
title: "Projects"
---

## Project 1:
As an introductory project aimed at exploring the functionality of Quarto and Github I have replicated an entry from #tidytuesday
For this example I am using code from a submission by @ryanahart with (code: https://github.com/curatedmess/TidyTuesday/blob/main/2023/01312023/cats.R)


```{r,echo=FALSE, message=FALSE,warning=FALSE , fig.width=10, fig.height=10}
# TidyTuesday | January 31, 2023 | Pet Cats UK
# Data Source is movebank.org

# load libraries ---------------------------------------------------------------
library(tidyverse)
library(tidytuesdayR)
library(showtext)
library(sf)



# add fonts ---------------------------------------------------------------
font_add_google(name = "Corben", family = "Corben")
font_add_google(name = "Inter", family = "Inter")
font1 <- "Corben"
font2 <- "Inter"

# turn on showtext --------------------------------------------------------
showtext_auto()
showtext_opts(dpi = 320)

# load data ---------------------------------------------------------------
# tuesdata <- tidytuesdayR::tt_load('2023-01-31')
# 
# cats_uk <- tuesdata$cats_uk
# cats_uk_reference <- tuesdata$cats_uk_reference

cats_uk <- read_csv("https://raw.githubusercontent.com/bobbyjy/MyData/main/cats_uk.csv")
cats_uk_reference <- read_csv("https://raw.githubusercontent.com/bobbyjy/MyData/main/cats_uk_reference.csv")
# wrangle and create df ---------------------------------------------------

# create list of cat tag_ids to use in the loop ---------------------------
names <- cats_uk %>% 
  inner_join(cats_uk_reference) %>% 
  select(tag_id) %>% 
  unique()

list <- names$tag_id
  
# loop to get colors for each image in list -------------------------------
# sadly I cannot find the link to the post where I found the sample code
# to create the distance matrix...

lapply(list, function(x) {
  
  cats_uk %>% 
    filter(algorithm_marked_outlier == "FALSE", manually_marked_outlier == "FALSE") %>% 
    filter(tag_id == x) %>%
    st_as_sf(coords = c("location_long", "location_lat"), crs="EPSG:4326") %>% 
    distinct() %>% 
    st_distance() %>% 
    as.data.frame() %>% 
    gather(point_id, dist) %>% 
    select(dist) %>% 
    mutate(distance = as.numeric(max(dist))) %>% 
    distinct(distance) %>% 
    mutate(name = paste0(x))
  
}) -> data

# create data frame -------------------------------------------------------
df <- do.call(rbind,  data)

# create plot -------------------------------------------------------------
df %>% 
  ggplot() +
  annotate("segment", x = 0, xend = 2400, y = 0, yend = 0, linewidth = 0.3, color = "#FFFFFF") +
  annotate("segment", x = 2238.1411, xend = 2238.1411, y = 0, yend = 3, size = 0.4, color = "#29cdcb", linetype = "dotted") +
  annotate("text", x = 2238.1411, y = 3.1, size = 2.5, color = "#29cdcb", hjust = "right", label = "Dexter2 (1 year old, male) leads the group with a range of 2,238 meters.") +
  annotate("segment", x = 103.9321, xend = 103.9321, y = 0, yend = 2, size = 0.4, color = "#29cdcb", linetype = "dotted") +
  annotate("text", x = 103.9321, y = 2.1, size = 2.5, color = "#29cdcb", hjust = "left", label = "Neva (4 year old, female) had the shortest range of 104 meters.") +
  geom_curve(aes(x = 0, y = 0, xend = distance, yend = 0), size = 0.5, alpha = 0.7, curvature = -0.6, ncp = 500, color = "#fb605c") +
  scale_y_continuous(expand = c(0, 0), limits = c(NA, 4)) +
  scale_x_continuous(expand = c(0, 0), limits = c(NA, 2400)) +
  coord_cartesian(clip = "off") +
  theme_void() +
  theme(plot.title = element_text(family = font1, size = 20, hjust = 0, face = "bold", color = "#fb605c"),
        plot.title.position = "plot",
        plot.subtitle = element_text(family = font2, size = 9, hjust = 0, color = "#FFFFFF"),
        plot.caption.position = "plot",
        plot.caption = element_text(size = 7, family = font2, color = "#FFFFFF", hjust = 0),
        axis.title.x = element_text(size = 7, family = font2, color = "#FFFFFF", vjust = -2.5),
        axis.text.x = element_text(size = 7, family = font2, color = "#FFFFFF", vjust = -5),
        legend.position = "none",
        plot.margin = unit(c(1, 1, 1, 1), "cm"),
        plot.background = element_rect(color = NA, fill = "#000000")) +
  labs(title = "Range of Cats",
       subtitle = "Range is the distance between the two farthermost GPS points within the movement\ntracking data for each of the 101 cats from a UK ecological study.",
       caption = "\n\n\n\n#TidyTuesday | Data: movebank.org | Design: Ryan Hart",
       x = "\nDistance (meters)")

# save plot ---------------------------------------------------------------
#ggsave(paste0("cats_", format(Sys.time(), "%d%m%Y"), ".png"), dpi = 320, width = 6, height = 6)

```
## Project 2:
An example of a KNN model that we are building and improving in class

```{r, echo=FALSE,message=FALSE, warning=FALSE}
#install.packages("tm")
library(tm) #for reading in text documents
#install.packages("tidytext")
library(tidytext) # for cleaning text and sentiments
#install.packages("topicmodels")
library(topicmodels) # for topic analysis
#install.packages("janeaustenr")
library(janeaustenr) # for free data
library(dplyr) # for data manipulation
library(tidyr)
library(stringr) # for manipulating string/text data
library(ggplot2) # for pretty graphs
#install.packages("wordcloud")
library(wordcloud) #duh
#install.packages("stopwords")
library(stopwords)
library(ggplot2)
library(tidyverse)
library(caret)
library(stringr)
library(formatR)
library(moderndive)
library(fastDummies)

wine <- read_rds("https://raw.githubusercontent.com/bobbyjy/MyData/main/pinot.rds")


# wine %>% 
#   select(province) %>% 
#   distinct()

# Oregon				
# California				
# Burgundy				
# Marlborough				
# Casablanca_Valley				
# New_York

OrWine <- wine %>% filter(province == "Oregon") %>% select(description)
CaWine <- wine %>% filter(province == "California") %>% select(description)
BurWine <- wine %>% filter(province == "Burgundy") %>% select(description) 
MarWine <- wine %>% filter(province == "Marlborough") %>% select(description)
CasWine <- wine %>% filter(province == "Casablanca_Valley") %>% select(description)
NewYWine <- wine %>% filter(province == "New_York") %>% select(description)

OR <- tibble(txt=OrWine$description)
CA <- tibble(txtCA=CaWine$description)
BU <- tibble(txtBU=BurWine$description)
MA <- tibble(txtMA=MarWine$description)
CAS <- tibble(txtCAS=CasWine$description)
NY <- tibble(txtNY=NewYWine$description)

OR<-OR %>% 
  unnest_tokens(word,txt)
CA<-CA %>% 
  unnest_tokens(word,txtCA)
BU<-BU %>% 
  unnest_tokens(word,txtBU)
MA<-MA %>% 
  unnest_tokens(word,txtMA)
CAS<-CAS %>% 
  unnest_tokens(word,txtCAS)
NY<-NY %>% 
  unnest_tokens(word,txtNY)

cleaned_OR <- OR %>% 
  anti_join(get_stopwords())
cleaned_CA <- CA %>% 
  anti_join(get_stopwords())
cleaned_BU <- BU %>% 
  anti_join(get_stopwords())
cleaned_MA <- MA %>% 
  anti_join(get_stopwords())
cleaned_CAS <- CAS %>% 
  anti_join(get_stopwords())
cleaned_NY <- NY %>% 
  anti_join(get_stopwords())


cleaned_OR <- cleaned_OR %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>400) %>% 
  arrange(desc(n))
cleaned_CA <- cleaned_CA %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>400) %>% 
  arrange(desc(n))
cleaned_BU <- cleaned_BU %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>400) %>% 
  arrange(desc(n))
cleaned_MA <- cleaned_MA %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>50) %>% 
  arrange(desc(n))
cleaned_CAS <- cleaned_CAS %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>50) %>% 
  arrange(desc(n))
cleaned_NY <- cleaned_NY %>% 
  group_by(word) %>% 
  summarise(word, n = n()) %>% 
  distinct() %>% 
  filter(n>50) %>% 
  arrange(desc(n))



a<-cleaned_OR %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "Oregon Word Descriptors over 400 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
b<-cleaned_CA %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "California Word Descriptors over 400 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
c<-cleaned_BU %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "Burgondy? Word Descriptors over 400 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
d<-cleaned_MA %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "Malboro? Word Descriptors over 50 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
e<-cleaned_CAS %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "Casa-whatever Word Descriptors over 50 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f<-cleaned_NY %>% ggplot(aes(reorder(word,n), n, fill = n))+
  geom_col(show.legend = FALSE) +
  labs(title = "New York Word Descriptors over 50 Occurences")+
  #CoreyPlotTheme+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

#oregon: new chocolate black oak tart oregon
#california: aromas palate bottling spice california
#burgondy: ripe tannins drink Burgundy
#malboro: medium noir notes now Marlborough
#casan:plumb, finish, aromas, flavors Casablanca_Valley
#newyork: New_York
#wine$new <- ifelse(str_detect(wine$description, regex('new', ignore_case = T)),1,0)
wine$chocolate <- ifelse(str_detect(wine$description, regex('chocolate', ignore_case = T)),1,0)
wine$black <- ifelse(str_detect(wine$description, regex('black', ignore_case = T)),1,0)
wine$oak <- ifelse(str_detect(wine$description, regex('oak', ignore_case = T)),1,0)
wine$tart <- ifelse(str_detect(wine$description, regex('tart', ignore_case = T)),1,0)
wine$oregon <- ifelse(str_detect(wine$description, regex('oregon', ignore_case = T)),1,0)
wine$aroma <- ifelse(str_detect(wine$description, regex('aroma', ignore_case = T)),1,0)
wine$palate <- ifelse(str_detect(wine$description, regex('palate', ignore_case = T)),1,0)
wine$bottling <- ifelse(str_detect(wine$description, regex('bottling', ignore_case = T)),1,0)
wine$spice <- ifelse(str_detect(wine$description, regex('spice', ignore_case = T)),1,0)
wine$california <- ifelse(str_detect(wine$description, regex('california', ignore_case = T)),1,0)
wine$ripe <- ifelse(str_detect(wine$description, regex('ripe', ignore_case = T)),1,0)
wine$tannin <- ifelse(str_detect(wine$description, regex('tannin', ignore_case = T)),1,0)
wine$drink <- ifelse(str_detect(wine$description, regex('drink', ignore_case = T)),1,0)
wine$burgundy <- ifelse(str_detect(wine$description, regex('burgundy', ignore_case = T)),1,0)
wine$medium <- ifelse(str_detect(wine$description, regex('medium', ignore_case = T)),1,0)
wine$noir <- ifelse(str_detect(wine$description, regex('noir', ignore_case = T)),1,0) # marlborlal..ish?
wine$note <- ifelse(str_detect(wine$description, regex('note', ignore_case = T)),1,0)
wine$now <- ifelse(str_detect(wine$description, regex('now', ignore_case = T)),1,0)
wine$marlborough <- ifelse(str_detect(wine$description, regex('marlborough', ignore_case = T)),1,0)
wine$plum <- ifelse(str_detect(wine$description, regex('plum', ignore_case = T)),1,0)

wine$finish <- ifelse(str_detect(wine$description, regex('finish', ignore_case = T)),1,0)
wine$flavor <- ifelse(str_detect(wine$description, regex('flavor', ignore_case = T)),1,0)
wine$casa <- ifelse(str_detect(wine$description, regex('casablanca', ignore_case = T)),1,0)
wine$newyork <- ifelse(str_detect(wine$description, regex('new york', ignore_case = T)),1,0)
wine$cola <- ifelse(str_detect(wine$description, regex('cola', ignore_case = T)),1,0)
wine$forward <- ifelse(str_detect(wine$description, regex('forward', ignore_case = T)),1,0)
wine$estate <- ifelse(str_detect(wine$description, regex('estate', ignore_case = T)),1,0)
wine$spicy <- ifelse(str_detect(wine$description, regex('spicy', ignore_case = T)),1,0)
wine$herb <- ifelse(str_detect(wine$description, regex('herb', ignore_case = T)),1,0)
wine$french <- ifelse(str_detect(wine$description, regex('french', ignore_case = T)),1,0)
wine$elegant <- ifelse(str_detect(wine$description, regex('elegant', ignore_case = T)),1,0)
wine$earth <- ifelse(str_detect(wine$description, regex('earth', ignore_case = T)),1,0)
wine$acidity <- ifelse(str_detect(wine$description, regex('acidity', ignore_case = T)),1,0)
wine$raspberry <- ifelse(str_detect(wine$description, regex('raspberry', ignore_case = T)),1,0)
#^just these factors make a .5!
wine$structure <- ifelse(str_detect(wine$description, regex('structure', ignore_case = T)),1,0)
wine$wood <- ifelse(str_detect(wine$description, regex('wood', ignore_case = T)),1,0)
wine$aging <- ifelse(str_detect(wine$description, regex('aging', ignore_case = T)),1,0)
wine$soft <- ifelse(str_detect(wine$description, regex('soft', ignore_case = T)),1,0)
wine$firm <- ifelse(str_detect(wine$description, regex('firm', ignore_case = T)),1,0)
#^just these factors make a .53
wine$supple <- ifelse(str_detect(wine$description, regex('supple', ignore_case = T)),1,0)
wine$long <- ifelse(str_detect(wine$description, regex('long', ignore_case = T)),1,0)
wine$crisp <- ifelse(str_detect(wine$description, regex('crisp', ignore_case = T)),1,0)
wine$dusty <- ifelse(str_detect(wine$description, regex('dusty', ignore_case = T)),1,0)
# wine$mocha <- ifelse(str_detect(wine$description, regex('mocha', ignore_case = T)),1,0)
#these made it worse (below)
#  wine$appellation <- ifelse(str_detect(wine$description, regex('appellation', ignore_case = T)),1,0)
# wine$baked <- ifelse(str_detect(wine$description, regex('baked', ignore_case = T)),1,0)
# wine$concentrated <- ifelse(str_detect(wine$description, regex('concentrated', ignore_case = T)),1,0)
#  wine$anise <- ifelse(str_detect(wine$description, regex('anise', ignore_case = T)),1,0)
 #cuvée
 
wine$cuv <- ifelse(str_detect(wine$description, regex('cuvée', ignore_case = T)),1,0)
wine$core <- ifelse(str_detect(wine$description, regex('core', ignore_case = T)),1,0)
wine$leaf <- ifelse(str_detect(wine$description, regex('leaf', ignore_case = T)),1,0)
wine$rich <- ifelse(str_detect(wine$description, regex('rich', ignore_case = T)),1,0)
wine$months <- ifelse(str_detect(wine$description, regex('months', ignore_case = T)),1,0)
#.547^
#wine$y2025 <- ifelse(str_detect(wine$description, regex('2025', ignore_case = T)),1,0)
#wine$hills <- ifelse(str_detect(wine$description, regex('hills', ignore_case = T)),1,0)
#wine$ava <- ifelse(str_detect(wine$description, regex('ava', ignore_case = T)),1,0)
# wine$clove <- ifelse(str_detect(wine$description, regex('clove', ignore_case = T)),1,0)
# wine$savory <- ifelse(str_detect(wine$description, regex('savory', ignore_case = T)),1,0)
# 
# wine$pepper <- ifelse(str_detect(wine$description, regex('pepper', ignore_case = T)),1,0)

wine <- wine %>% 
  mutate(points = scale(points, center = T, scale = T)) %>%
  mutate(price = scale(log(price), center = T, scale = T)) %>% 
  select(-id,-description)
```

### Model performance across provinces:

```{r}
#PROJECT 1 Feature Engineering
set.seed(504)
wine_index <- createDataPartition(wine$province, p = 0.8, list = FALSE)
train <- wine[ wine_index, ]
test <- wine[-wine_index, ]

#10 fold cross validation
control <- trainControl(
                           method = "repeatedcv",
                           number = 5,
                           repeats = 3
                           )

fit <- train(province ~ .,
             data = train, 
             method = "knn",#knn
             tuneLength = 20, #the 30 different values for K
             metric = "Kappa",
             trControl = control)

confusionMatrix(predict(fit, test),factor(test$province))

#fit
```

### Which K value is ideal?
```{r}
ggplot(fit, metric="Kappa")
```